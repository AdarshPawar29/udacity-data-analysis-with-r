time3$zone
time3$gmtoff
tiempo <- "January 10, 2012 10:40"
strptime(tiempo, %B %d)
strptime(tiempo, %B %d, %Y %H:%M)
Sys.setenv(LANG = "en")
strptime(tiempo, %B %d, %Y %H:%M)
defaults write org.R-project.R force.LANG en_US.UTF-8
defaults write org.R-project.R force.LANG en_US.UTF-8
help(Startup)
Sys.getenv("LANG")
Sys.setenv(LANG = "en_US.UTF-8")
Sys.getenv("LANG")
q()
Sys.getenv("LANG")
Sys.setenv(LANG = "en_US.UTF-8")
Sys.getenv("LANG")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
p <- function(x){x+x}
p(2)
makeVector(vec)
vec <- makeVector()
vec$set(2)
vec$get
vec$get()
a <- makeVector(c(1,2,3,4))
a$get()
a$getmean()
cachemean(a)
a$getmean()  # this is only to show you that the mean has been stored and does not affect anything
cachemean(a)
a$set(c(10,20,30,40))
a$getmean()
cachemean(a)
cachemean(a)
a$get()
a$setmean(0)  # do NOT call setmean() directly despite it being accessible for the reason you will see next
a$getmean()
a$get()
cachemean(a)
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
source("cachematrix.R")
makeCacheMatrix <- function(matrix = matrix()) {
# store inverse value
inverse <- NULL
# set the original matrix and reset inverse
set <- function(y) {
matrix <<- y
inverse <<- NULL
}
# get the original matrix
get <- function() matrix
# set inverse value
set_inverse <- function(inv) inverse <<- inv
# get inverse value
get_inverse <- function() inverse
# Returns a list of the 4 functions, this is the special "matrix"
list(set = set, get = get,
set_inverse = set_inverse,
get_inverse = get_inverse)
}
## This function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and
## the matrix has not changed), then the cachesolve should retrieve the
## inverse from the cache.
cacheSolve <- function(special_matrix, ...) {
inverse <- special_matrix$get_inverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- special_matrix$get()
inverse <- solve(data, ...)
special_matrix$set_inverse(inverse)
inverse
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()         # Returns original matrix
cacheSolve(amatrix)   # Computes, caches, and returns    matrix inverse
amatrix$get_inverse()  # Returns matrix inverse
cacheSolve(amatrix)   # Returns cached matrix inverse using previously computed matrix inverse
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(amatrix)   # Computes, caches, and returns new matrix inverse
amatrix$get()         # Returns matrix
amatrix$getinverse()  # Returns matrix inverse
amatrix$get_inverse()  # Returns matrix inverse
library('swirl')
install_from_swirl("Getting and Cleaning Data")
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head()
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
tbl_df
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran,r_version == "3.1.1", country == "US")
?Comparison
filter(cran,r_version <= "3.1.1", country == "IN")
filter(cran,r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country =="IN")
filter(cran,size>100500,r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id)
)
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran, ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2 ^ 10)
mutate(cran3, correct_size = size + 1000)
summarize(cran,avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit
submit()
pack_sum
quantile(pack_sum$count,probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts,20)
arragnge(top_counts,desc(count))
arrange(top_counts,desc(count))
quantile(pack_sum$unique,probs = 0.99)
top_unique <- filter(pack_sum,unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
print
submit()
submit()
cran %>%
select(ip_id,country,package,size) %>%
print()
submit()
submit()
submit()
submit()
library(datasets)
data(iris)
?iris
head(iris)
str(iris)
summary(iris)
library(dyplr)
library(dplyr)
iris <- tbl_df(iris)
iris
print(iris)
select(iris,Species==virginica)
filter(iris,Species==virginica)
filter(iris,Species=="virginica")
filter(iris,Species=="virginica") %>% summary(mean())
filter(iris,Species=="virginica") %>% summary(mean
)
iris[["Sepal.length"]]
iris[["Sepal.Length"]]
mean(iris[["Sepal.Length"]])
species <- group_by(iris,Species)
species
mean <- summarise(species,mean)
mean <- summarise(species,mean(Sepal.Length))
mean
library(datasets)
library(dplyr)
data(iris)
iris <- tbl_df(iris)
species <- group_by(iris,Species)
means <- summarize(iris,mean(Sepal.Length))
means
means <- summarize(species,mean(Sepal.Length))
means
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
colMeans(iris)
apply(iris, 1, mean)
summarize(iris,mean(1:5))
summarize(iris,mean(1))
summarize(iris,mean(Speal.Lenth))
summarize(iris,mean("Speal.Lenth"))
summarise(iris,mean(Sepal.Length))
summarise(iris,mean(Sepal.Length),mean(Sepal.Width),mean(Petal.Length),mean(Petal.Width))
apply(iris[, 1:4], 2, mean)
summary(iris)
library(datasets)
data(mtcars)
?mtcars
# Continuing with the 'iris' dataset from the previous Question, what R code returns a vector of the means of the variables 'Sepal.Length', 'Sepal.Width', 'Petal.Length', and 'Petal.Width'?
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
mtcars <- tbl_df(mtcars)
summarize(group_by(mtcars,cyl),ave(mtcars.mpg))
summarize(group_by(mtcars,cyl),ave("mtcars.mpg"))
cyl <- group_by(mtcars,cyl)
cyl
summarise(cyl,mean(cyl.mpg))
summarise(cyl,mean("cyl.mpg"))
summarise(cyl,mean = mean("cyl.mpg"))
summarise(cyl,mean = mean(cyl.mpg))
summarise(cyl,mean = mean(mpg))
library(datasets)
data(mtcars)
str(mtcars)
library(dplyr)
mtcars <- tbl_df(mtcars)
mtcars %>% summarise(mean(hp))
str(mtcars)
summarize(mtcars)
hp_mean <- mtcars %>% summarise(mean(hp))
hp_mean
as.integer(hp_meant)
as.integer(hp_mean)
as.double(hp_mean)
data_mtcars <- data(mtcars)
summarize(data_mtcars)
summarise(data_mtcars)
summary(data_mtcars)
summary(mtcars)
mtcars %>% filter(cyl == 4) %>% summarise(mean(hp))
mtcars %>% filter(cyl == 4)
mtcars %>% filter(cyl == 4) %>% summarise(mean(hp))
hp_mean <- mtcars %>% filter(cyl == 4) %>% summarise(mean(hp))
hp_mean <- as.double(hp_mean)
hp_mean_4 <- mtcars %>% filter(cyl == 4) %>% summarise(mean(hp))
hp_mean_4 <- as.double(hp_mean_4)
hp_mean_8 <- mtcars %>% filter(cyl == 8) %>% summarise(mean(hp))
hp_mean_8 <- as.double(hp_mean_8)
abs(hp_mean_4,hp_mean_8)
abs(hp_mean_4-hp_mean_8)
debug(ls)
ls
ls()
q
quit()
exit
exit()
q
q()
a
?xyplot()
library(lattice)
?xyplot()
x <- xyplot()
x <- rnorm(100)
p <- xyplot(x)
y <- x + rnorm(100)
p <- xyplot(x,y)
xyplot(x,y)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
typeof(xyplot(Ozone ~ Wind, data = airquality))
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?BodyWeight
?text()
?panel.lmline()
?axis()
?points()
?text()
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?trellis.par.set()
?par()
?print.trellis()
?splom()
?trellis.par.set()
library(datasets)
data(airquality)
rm(p)
rm(x)
rm(y)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ Month) + geom_smooth()
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom()
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth()
reddit <- read.csv("/tmp/reddit.csv")
rm(airquality)
str(reddit)
?factor
levels <- c("Uno", "Tres", "Dos")
l <- c("Uno", "Tres", "Dos")
rm(levels)
f <- factor(l)
f
f <- factor(l, levels = c("Uno","Dos","Tres"))
f
f
f.order <- ordered(l,levels = c("Uno","Dos","Tres"))
f
setwd('~/Repos/data-analysis-with-r/')
setwd('~/Repos/data-analysis-with-r/extra-exercises')
players <- read.csv('NBA-Census-10.14.2013.csv',stringsAsFactors=FALSE)
str(players)
warriors <- subset(players, Team="Warriors")
warriors <- subset(players, Team=="Warriors")
names(players) <- gsub("\\.\\.",".",names(players))
names(players) <- tolower(names(players))
names(players)
names(players) <- gsub("\\.\\.",".",names(players))
names(players)
names(players) <- gsub("$.","",names(players))
names(players)
names(players) <- gsub("\$.","",names(players))
warriors <- subset(players, Team=="Warriors")
setwd('~/Repos/players-analysis-with-r/extra-exercises')
players <- read.csv('NBA-Census-10.14.2013.csv',stringsAsFactors=FALSE)
names(players) <- gsub("\\.\\.",".",names(players))
names(players) <- gsub("\\.\\.",".",names(players))
names(players) <- gsub("$.","",names(players))
names(players) <- tolower(names(players))
names(players)
warriors <- subset(players, Team=="Warriors")
warriors <- subset(players, team=="Warriors")
warriors.o <- warriors[order(warriors$ht.in.),]
barplot(warriors.o$ht.in.,
names.arg = warriors.o$name,
horiz = TRUE,
border = NA,
las = 1,
main="Heights of Golden State Warriors")
barplot(warriors.o$ht.in.,
names.arg = warriors.o$name,
horiz = TRUE,
border = NA,
#las = 1,
main="Heights of Golden State Warriors")
barplot(warriors.o$ht.in.,
names.arg = warriors.o$name,
horiz = TRUE,
border = NA,
las = 1, # Horizontal players names
main="Heights of Golden State Warriors")
?aggregate
avg_heights <- aggregate(ht.in. ~ pos,data = players,mean)
typeof(avg_heights)
avg_heights.o <- avg_heights[order(avg_heights$ht.in.,decreasing = FALSE), ]
barplot(avg_heights$ht.in.,
names.arg = avg_heights$pos,
border = NA,
las = 1)
barplot(avg_heights$ht.in.,
names.arg = avg_heights$pos,
border = NA,
#las = 1)
barplot(avg_heights$ht.in.,
names.arg = avg_heights$pos,
border = NA,
las = 0)
)
barplot(avg_heights$ht.in.,
names.arg = avg_heights$pos,
border = NA,
las = 1)
?barplot
barplot(avg_heights$ht.in.,
names.arg = avg_heights$pos,
border = NA,
las = 1)
?range
range(players$ht.in.)
height_ranges <- range(players$ht.in.)
counts <- rep(0,20)
height_ranges <- range(players$ht.in.)
counts <- rep(0,20)
y <- c()
for(i in 1:length(players[,1])) {
countsIndex <- players$ht.in.[i] - height_ranges[1] +1
counts[countsIndex] <- counts[countsIndex] + 1
y <- c(y,counts[countsIndex])
}
plot(players$ht.in., y,
type ="n",
main = "Players heights",
xlabs = "inches",
ylab = "count")
points(players$ht.in., y,
pch = 21,
col = NA,
bg = "#999999")
barplot(cnts,
names.arg=69:88,
main="Player heights",
xlab="inches",
ylab="count",
border=NA,
las=1)
barplot(counts,
names.arg=69:88,
main="Player heights",
xlab="inches",
ylab="count",
border=NA,
las=1)
par(mfrow = c(1,3), mar = c(3,3,3,3))
hist(players$ht.in. , main="NBA Player Heights", xlab="inches",
breaks=seq(65, 90, 1)))
hist(players$ht.in. , main="NBA Player Heights", xlab="inches",
breaks=seq(65, 90, 1))
hist(players$ht.in. , main="NBA Player Heights", xlab="inches",
breaks=seq(65, 90, 2))
hist(players$ht.in. , main="NBA Player Heights", xlab="inches",
breaks=seq(height_ranges, 1))
hist(players$ht.in. , main="NBA Player Heights", xlab="inches",
breaks=seq(c(height_ranges, 1))
hist(players$ht.in. , main="NBA Player Heights", xlab="inches",
breaks=seq(c(height_ranges, 1)))
hist(players$ht.in. , main="NBA Player Heights", xlab="inches",
breaks=seq(c(height_ranges, 1)))
hist(players$ht.in. , main="NBA Player Heights", xlab="inches",
breaks=seq(height_ranges[1],height_ranges[2], 1))
par(mfrow = c(1,3), mar = c(3,3,3,3))
hist(players$ht.in. , main="NBA Player Heights", xlab="inches",
breaks=seq(65, 90, 1))
hist(players$ht.in. , main="NBA Player Heights", xlab="inches",
breaks=seq(65, 90, 2))
hist(players$ht.in. , main="NBA Player Heights", xlab="inches",
breaks=seq(height_ranges[1],height_ranges[2], 5))
hist(players$ht.in. , main="NBA Player Heights", xlab="inches",
breaks=seq(height_ranges[1],height_ranges[2], 5))
hist(players$ht.in. , main="NBA Player Heights", xlab="inches",
breaks=seq(65,90, 5))
par(mfrow = c(2,3), las = 1, mar = c(5,5,4,1) )
positions <- unique(players$pos)
positions <- unique(players$pos)
for (i in 1:length(positions)){
curr_players <- subset(players, pos == positions[i])
hist(curr_players$ht.in.,
main = positions[i],
breaks = 65:90,
xlab = "inches",
border = "#ffffff",
col = "#999999",
lwd = 0.4)
}
